---
title: "Functions for Logistic W/L Volleyball Model"
format:
  html:
    toc: true
    toc-depth: 2
    embed-resources: true
---

# Functions

```{r}
# Access data from Mac Athletics website
vballdata <- function(year) {
  year <- as.character(year)
  url <- paste0("https://athletics.macalester.edu/sports/womens-volleyball/stats/", year)
  table <- read_html(url) %>%
    html_table() %>%
    .[[6]] %>%
    mutate(Opponent = str_extract(Opponent, "[A-Z].*")) %>% # remove "vs" and "at" from opponent name
    mutate(`W/L` = as.factor(`W/L`)) %>%
    mutate(PCT = PCT * 100) %>% # convert hitting percentage to percentage
    filter(Date != "") %>% # remove year-end stats rows
    mutate(across(c(SA, SE, K, E, TA, AST, RE, DIG, BS, BA, BE, TB, BHE), ~ .x / SP)) # calculate per set stats (rather than raw totals)
  return(table)
}

vball2023 <- vballdata(2023) # example call
```

```{r}
# create table with data from multiple years
combineyears <- function(years) {
  data <- map_dfr(years, vballdata)
  return(data)
} 

multyears <- combineyears(c(2021, 2022, 2023)) # example call
```

```{r}
# function for logistic regression model (on training data)
vballmodelcoaches <- function(df, vars) {
  df <- df %>%
    mutate(`W/L` = as.factor(`W/L`)) %>% 
    mutate(`W/L` = relevel(`W/L`, ref = "L")) # reference is the 0
  
  logistic_spec <- logistic_reg() %>%
    set_mode("classification") %>% 
    set_engine("glm")
  
# create formula based on variables passed in (VECTOR OF STRINGS)
  formula <- as.formula(paste("`W/L` ~", paste(vars, collapse = " + ")))
  
  variable_recipe <- recipe(formula, data = df)
  
  logistic_workflow <- workflow() %>% 
    add_recipe(variable_recipe) %>%
    add_model(logistic_spec)
  
  logistic_model <- logistic_workflow %>% 
    fit(data = df)
  return(logistic_model) # returns model coefficients
}

tidyvballmodel <- function(model) {
  return(model %>% tidy())
}

model <- vballmodelcoaches(multyears, c("PCT", "SA", "SE")) # example call using the variables that the mac vball coaches were curious about
tidymodel <- tidyvballmodel(model) # example call
```

```{r}
# function for interpreting model coefficients
interpretmodel <- function(tidy_model) {
  interpretations <- tidy_model %>%
    filter(term != "(Intercept)") %>%
    mutate(
      odds_change = exp(estimate),

      interpretation = ifelse(
        estimate > 0,
        paste0(
          "When controlling all other variables, for each one-unit increase in ", term,
          ", the probability of winning increases by approximately ",
          round((odds_change / (odds_change + 1)) * 100, 2), "%. ", term, " has a p-value of ", round(p.value, 6), "."
        ),
        paste0(
          "When controlling all other variables, for each one-unit increase in ", term,
          ", the probability of winning decreases by approximately ",
          abs(round((odds_change / (odds_change + 1)) * 100, 2), "%. ", term, " has a p-value of ", round(p.value, 6), "."
        )
      )
    )
  )
    
  
  # Return only the interpretations
  return(interpretations$interpretation)
}

interpretmodel(tidymodel) # example call
```


```{r}
# in-sample stats function
insampleconf <- function(model, df) {
  in_sample_classifications <- model %>%
  augment(new_data = df) %>%
  mutate(.pred_class = ifelse(is.na(.pred_class), "W", .pred_class)) %>%
  mutate(.pred_class = if_else(.pred_class == "1", "L", "W")) %>%
  mutate(.pred_class = as.factor(.pred_class)) %>%
  mutate(.pred_class = droplevels(.pred_class)) %>%
  mutate(`W/L` = factor(`W/L`, levels = c("L", "W"))) # DON'T ASK ME ABOUT THIS I SPENT HOURS TRYING TO FIGURE OUT WHY IT WAS BEING WEIRD WITH THE LEVELS AND THIS IS A SOLUTION
  
  confmat <- in_sample_classifications %>% 
    conf_mat(truth = `W/L`, estimate = .pred_class)
  
  
  return(confmat) # returns in-sample confusion matrix
}

conf <- insampleconf(model, multyears) # example call (used for plotting and accuracy)
```

```{r}
# plot confusion matrix function
plotinsampleconf <- function(confmat) {
  confmat %>% 
    autoplot()
}

plotinsampleconf(conf) # example call
```

```{r}
# calculating accuracy of model
modelaccuracy <- function(confmat) {
  accuracy <- summary(confmat, event_level = "second") %>%
    filter(.metric == "accuracy")
  return(accuracy) # returns in-sample accuracy
}

modelaccuracy(conf) # example call
```

```{r}
# function to predict new data
predictnewdata <- function(model, newdata) {
  predictions <- model %>% 
    augment(new_data = newdata) %>%
    mutate(.pred_class = ifelse(is.na(.pred_class), "W", .pred_class)) %>%
    mutate(.pred_class = if_else(.pred_class == "1", "L", "W")) %>%
    mutate(Match = if_else(.pred_class == `W/L`, TRUE, FALSE))
  return(predictions) # returns predictions
}

predictnewdata(model, vballdata(2024)) # example call, runs model on new data (2024 data was not used to train the data)
```

```{r}
# new model accuracy function (returns single value)
newmodelaccuracy <- function(predictions) {
  accuracy <- predictions %>%
    group_by(Match) %>%
    summarize(count = n()) %>%
    ungroup() %>%
    summarize(
      total_true = sum(count[Match == TRUE]),
      total = sum(count)
    ) %>%
    mutate(accuracy = total_true / total) 
  
  return(accuracy$accuracy) 
}


newmodelaccuracy(predictnewdata(model, vballdata(2024))) # example call
```